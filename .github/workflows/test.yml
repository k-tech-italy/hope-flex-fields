name: Test

on:
  push:
    branches:
      - '**'        # matches every branch

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  attestations: write


jobs:
  changes:
    runs-on: ubuntu-latest
    concurrency:
      group: changes-group
      cancel-in-progress: true
    timeout-minutes: 1
    defaults:
      run:
        shell: bash
    outputs:
      run_tests: ${{steps.changes.outputs.run_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
      - id: changes
        name: Check for file changes
        uses: dorny/paths-filter@0bc4621a3135347011ad047f9ecf449bf72ce2bd # v3.0.0
        with:
          base: ${{ github.ref }}
          token: ${{ github.token }}
          filters: .github/file-filters.yml

  ci:
    runs-on: ubuntu-latest
    name: Test py${{ matrix.python-version }}/dj${{matrix.django-version}}
    defaults:
      run:
        shell: bash
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ "3.11", "3.12" ]
        django-version: [ "3.2", "4.2", "5.0" ]
      fail-fast: true
    needs: [ changes ]
    if: needs.changes.outputs.run_tests || contains(github.event.head_commit.message, 'ci:release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'
      - name: Cache virtualenv
        uses: actions/cache@v3
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version}}-${{ hashFiles('pdm.lock') }}
          path: .venv
      - name: Test
        run: |
          pip install pdm
          pdm venv create
          pdm install
          pdm run pytest tests
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: ${{ always() }}
        continue-on-error: true
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false
          name: codecov-${{env.GITHUB_REF_NAME}}
